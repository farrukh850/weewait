<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/popup.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/popup.css" />
              <option name="originalContent" value="/* Popup styles */&#10;.popup-overlay {&#10;  position: fixed;&#10;  top: 0;&#10;  left: 0;&#10;  width: 100%;&#10;  height: 100%;&#10;  background-color: rgba(0, 0, 0, 0.5);&#10;  display: flex;&#10;  justify-content: center;&#10;  align-items: center;&#10;  z-index: 50;&#10;  opacity: 0;&#10;  visibility: hidden;&#10;  transition: all 0.3s ease;&#10;}&#10;&#10;.popup-overlay.active {&#10;  opacity: 1;&#10;  visibility: visible;&#10;}&#10;&#10;.popup-content {&#10;  background-color: white;&#10;  border-radius: 20px;&#10;  padding: 24px;&#10;  position: relative;&#10;  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);&#10;  transform: translateY(-20px);&#10;  transition: all 0.3s ease;&#10;  max-width: 560px;&#10;  width: 100%;&#10;}&#10;&#10;.popup-overlay.active .popup-content {&#10;  transform: translateY(0);&#10;}&#10;&#10;.popup-close {&#10;  position: absolute;&#10;  top: 16px;&#10;  right: 16px;&#10;  cursor: pointer;&#10;}&#10;&#10;.toast-block em {&#10;  transition: width 5s linear;&#10;}&#10;" />
              <option name="updatedContent" value="/* Popup styles */&#10;.popup-overlay {&#10;  position: fixed;&#10;  top: 0;&#10;  left: 0;&#10;  width: 100%;&#10;  height: 100%;&#10;  background-color: rgba(0, 0, 0, 0.5);&#10;  display: flex;&#10;  justify-content: center;&#10;  align-items: center;&#10;  z-index: 9999; /* Increased z-index to ensure visibility */&#10;  opacity: 0;&#10;  visibility: hidden;&#10;  transition: all 0.3s ease;&#10;  -webkit-transition: all 0.3s ease; /* For Chrome/Safari */&#10;}&#10;&#10;.popup-overlay.active {&#10;  opacity: 1;&#10;  visibility: visible;&#10;}&#10;&#10;.popup-content {&#10;  background-color: white;&#10;  border-radius: 20px;&#10;  padding: 24px;&#10;  position: relative;&#10;  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);&#10;  transform: translateY(-20px);&#10;  transition: all 0.3s ease;&#10;  -webkit-transition: all 0.3s ease; /* For Chrome/Safari */&#10;  max-width: 560px;&#10;  width: 100%;&#10;  margin: 0 10px; /* Added margin for mobile */&#10;  overflow-y: auto; /* Enable scrolling */&#10;  max-height: 90vh; /* Limit height on mobile */&#10;}&#10;&#10;.popup-overlay.active .popup-content {&#10;  transform: translateY(0);&#10;  -webkit-transform: translateY(0); /* For Chrome/Safari */&#10;}&#10;&#10;.popup-close {&#10;  position: absolute;&#10;  top: 16px;&#10;  right: 16px;&#10;  cursor: pointer;&#10;  z-index: 10; /* Ensure clickability */&#10;  padding: 5px; /* Larger touch target */&#10;}&#10;&#10;.toast-block em {&#10;  transition: width 5s linear;&#10;  -webkit-transition: width 5s linear; /* For Chrome/Safari */&#10;}&#10;&#10;/* Mobile popup specific styles */&#10;@media (max-width: 768px) {&#10;  #filter-popup-mobile .popup-content,&#10;  #sort-popup-mobile .popup-content,&#10;  #search-popup-mobile .popup-content {&#10;    position: fixed;&#10;    bottom: 0;&#10;    left: 0;&#10;    right: 0;&#10;    max-width: 100%;&#10;    margin: 0;&#10;    border-radius: 32px 32px 0 0;&#10;    transform: translateY(100%);&#10;    -webkit-transform: translateY(100%);&#10;  }&#10;&#10;  #filter-popup-mobile.active .popup-content,&#10;  #sort-popup-mobile.active .popup-content,&#10;  #search-popup-mobile.active .popup-content {&#10;    transform: translateY(0);&#10;    -webkit-transform: translateY(0);&#10;  }&#10;  &#10;  /* Scrollable area with fade effect */&#10;  .overflow-y-auto {&#10;    position: relative;&#10;    max-height: 70vh;&#10;  }&#10;  &#10;  #scroll-fade {&#10;    position: absolute;&#10;    bottom: 0;&#10;    left: 0;&#10;    right: 0;&#10;    height: 30px;&#10;    background: linear-gradient(to bottom, rgba(255,255,255,0), rgba(255,255,255,1));&#10;    pointer-events: none;&#10;    opacity: 1;&#10;    transition: opacity 0.3s ease;&#10;    -webkit-transition: opacity 0.3s ease;&#10;    z-index: 1;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/popup.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/popup.js" />
              <option name="originalContent" value="// Popup functionality&#10;document.addEventListener('DOMContentLoaded', function() {&#10;  // Initialize popup functionality&#10;  initPopup();&#10;&#10;  // Initialize toast functionality for Apply Now buttons&#10;  initToastForApplyButtons();&#10;});&#10;&#10;function initPopup() {&#10;  // Find ALL popup-button elements that will trigger the popup&#10;  const popupButtons = document.querySelectorAll('.popup-button');&#10;&#10;  if (popupButtons.length &gt; 0) {&#10;    // Add click event listener to ALL popup buttons&#10;    popupButtons.forEach(button =&gt; {&#10;      button.addEventListener('click', function(e) {&#10;        e.preventDefault(); // Prevent default link behavior&#10;        openPopup('filter-popup');&#10;      });&#10;    });&#10;  }&#10;&#10;  // Close popup when clicking the close button or overlay&#10;  const closeButtons = document.querySelectorAll('.popup-close, .popup-overlay');&#10;  closeButtons.forEach(button =&gt; {&#10;    button.addEventListener('click', function(e) {&#10;      // Only close if clicking the overlay itself or the close button&#10;      if (e.target === this || e.target.closest('.popup-close')) {&#10;        const popupId = e.target.closest('.popup-overlay').id;&#10;        closePopup(popupId);&#10;      }&#10;    });&#10;  });&#10;&#10;  // Handle the Apply button click in the popup&#10;  const applyButton = document.querySelector('.apply-now-button');&#10;  if (applyButton) {&#10;    applyButton.addEventListener('click', function(e) {&#10;      e.preventDefault(); // Prevent default form submission&#10;&#10;      // Close the popup&#10;      const popupId = e.target.closest('.popup-overlay').id;&#10;      closePopup(popupId);&#10;&#10;      // Show toast notification&#10;      showToast();&#10;&#10;      // Scroll to top of the page&#10;      window.scrollTo({&#10;        top: 0,&#10;        behavior: 'smooth'&#10;      });&#10;    });&#10;  }&#10;}&#10;&#10;function initToastForApplyButtons() {&#10;  // Get all Apply Now buttons&#10;  const applyButtons = document.querySelectorAll('.apply-now-button');&#10;  const toastBlock = document.querySelector('.toast-block');&#10;&#10;  if (applyButtons.length &gt; 0 &amp;&amp; toastBlock) {&#10;    applyButtons.forEach(button =&gt; {&#10;      button.addEventListener('click', function(e) {&#10;        e.preventDefault(); // Prevent default link behavior&#10;        showToast(toastBlock);&#10;      });&#10;    });&#10;&#10;    // Add event listener to close toast when clicking the close button&#10;    const toastCloseButton = toastBlock.querySelector('button');&#10;    if (toastCloseButton) {&#10;      toastCloseButton.addEventListener('click', function() {&#10;        hideToast(toastBlock);&#10;      });&#10;    }&#10;&#10;    // Auto-hide the toast after 5 seconds&#10;    let toastTimeout;&#10;    function showToast(toast) {&#10;      // First clear any existing timeout&#10;      if (toastTimeout) {&#10;        clearTimeout(toastTimeout);&#10;      }&#10;&#10;      // Position the toast at the bottom of the viewport&#10;      toast.style.display = 'block';&#10;      toast.style.opacity = '0';&#10;      toast.style.transition = 'all 0.3s ease';&#10;&#10;      // Trigger reflow&#10;      void toast.offsetWidth;&#10;&#10;      // Show toast with animation&#10;      toast.style.opacity = '1';&#10;&#10;      // Set timeout to hide the toast&#10;      toastTimeout = setTimeout(() =&gt; {&#10;        hideToast(toast);&#10;      }, 5000);&#10;&#10;      // Start progress bar animation&#10;      const progressBar = toast.querySelector('em');&#10;      if (progressBar) {&#10;        progressBar.style.transition = 'width 5s linear';&#10;        progressBar.style.width = '0';&#10;      }&#10;    }&#10;&#10;    function hideToast(toast) {&#10;      toast.style.opacity = '0';&#10;&#10;      // Reset progress bar&#10;      const progressBar = toast.querySelector('em');&#10;      if (progressBar) {&#10;        progressBar.style.transition = 'none';&#10;        progressBar.style.width = '50%';&#10;      }&#10;    }&#10;  }&#10;}&#10;&#10;function openPopup(popupId) {&#10;  const popup = document.getElementById(popupId);&#10;  if (popup) {&#10;    popup.classList.add('active');&#10;    document.body.style.overflow = 'hidden'; // Prevent scrolling&#10;  }&#10;}&#10;&#10;function closePopup(popupId) {&#10;  const popup = document.getElementById(popupId);&#10;  if (popup) {&#10;    popup.classList.remove('active');&#10;    document.body.style.overflow = ''; // Restore scrolling&#10;  }&#10;}&#10;&#10;// Global variable to store timeout ID&#10;let toastTimeout;&#10;&#10;function showToast() {&#10;  const toast = document.querySelector('.toast-block');&#10;  if (!toast) return;&#10;&#10;  // First clear any existing timeout&#10;  if (toastTimeout) {&#10;    clearTimeout(toastTimeout);&#10;  }&#10;&#10;  // Make the toast visible&#10;  toast.classList.remove('hidden');&#10;  toast.style.display = 'block';&#10;  toast.style.opacity = '1';&#10;&#10;  // Reset and start the progress bar animation&#10;  const progressBar = toast.querySelector('em');&#10;  if (progressBar) {&#10;    progressBar.style.transition = 'none';&#10;    progressBar.style.width = '100%';&#10;&#10;    // Force reflow to make sure the transition starts from the beginning&#10;    void progressBar.offsetWidth;&#10;&#10;    progressBar.style.transition = 'width 5s linear';&#10;    progressBar.style.width = '0';&#10;  }&#10;&#10;  // Auto-hide the toast after 5 seconds&#10;  toastTimeout = setTimeout(() =&gt; {&#10;    hideToast();&#10;  }, 5000);&#10;}&#10;&#10;function hideToast() {&#10;  const toast = document.querySelector('.toast-block');&#10;  if (!toast) return;&#10;&#10;  toast.style.opacity = '0';&#10;&#10;  // Hide the toast after the transition&#10;  setTimeout(() =&gt; {&#10;    toast.style.display = 'none';&#10;    toast.classList.add('hidden');&#10;&#10;    // Reset progress bar&#10;    const progressBar = toast.querySelector('em');&#10;    if (progressBar) {&#10;      progressBar.style.transition = 'none';&#10;      progressBar.style.width = '100%';&#10;    }&#10;  }, 300);&#10;}&#10;&#10;// Mobile filter popup toggle functionality&#10;document.addEventListener('DOMContentLoaded', function() {&#10;  const filterMobileBtn = document.getElementById('filter-mobile-btn');&#10;  const filterPopupMobile = document.getElementById('filter-popup-mobile');&#10;&#10;  if (filterMobileBtn &amp;&amp; filterPopupMobile) {&#10;    // Add click event to mobile filter button&#10;    filterMobileBtn.addEventListener('click', function(e) {&#10;      e.preventDefault();&#10;      filterPopupMobile.classList.toggle('active');&#10;      document.body.style.overflow = filterPopupMobile.classList.contains('active') ? 'hidden' : '';&#10;    });&#10;&#10;    // Close popup when clicking the close button inside filter-popup-mobile&#10;    const closeButtons = filterPopupMobile.querySelectorAll('.popup-close');&#10;    closeButtons.forEach(button =&gt; {&#10;      button.addEventListener('click', function(e) {&#10;        e.preventDefault();&#10;        filterPopupMobile.classList.remove('active');&#10;        document.body.style.overflow = '';&#10;      });&#10;    });&#10;&#10;    // Close popup when clicking on the overlay (outside of popup content)&#10;    filterPopupMobile.addEventListener('click', function(e) {&#10;      if (e.target === this) {&#10;        filterPopupMobile.classList.remove('active');&#10;        document.body.style.overflow = '';&#10;      }&#10;    });&#10;  }&#10;&#10;  // Sort popup mobile toggle functionality&#10;  const sortMobileBtn = document.getElementById('sort-mobile-btn');&#10;  const sortPopupMobile = document.getElementById('sort-popup-mobile');&#10;&#10;  if (sortMobileBtn &amp;&amp; sortPopupMobile) {&#10;    // Add click event to mobile sort button&#10;    sortMobileBtn.addEventListener('click', function(e) {&#10;      e.preventDefault();&#10;      sortPopupMobile.classList.toggle('active');&#10;      document.body.style.overflow = sortPopupMobile.classList.contains('active') ? 'hidden' : '';&#10;    });&#10;&#10;    // Close popup when clicking the close button inside sort-popup-mobile&#10;    const closeButtons = sortPopupMobile.querySelectorAll('.popup-close');&#10;    closeButtons.forEach(button =&gt; {&#10;      button.addEventListener('click', function(e) {&#10;        e.preventDefault();&#10;        sortPopupMobile.classList.remove('active');&#10;        document.body.style.overflow = '';&#10;      });&#10;    });&#10;&#10;    // Close popup when clicking on the overlay (outside of popup content)&#10;    sortPopupMobile.addEventListener('click', function(e) {&#10;      if (e.target === this) {&#10;        sortPopupMobile.classList.remove('active');&#10;        document.body.style.overflow = '';&#10;      }&#10;    });&#10;  }&#10;&#10;  // Search popup mobile toggle functionality&#10;  const searchMobileBtn = document.getElementById('search-mobile-btn');&#10;  const searchPopupMobile = document.getElementById('search-popup-mobile');&#10;&#10;  if (searchMobileBtn &amp;&amp; searchPopupMobile) {&#10;    // Add click event to mobile search button&#10;    searchMobileBtn.addEventListener('click', function(e) {&#10;      e.preventDefault();&#10;      searchPopupMobile.classList.toggle('active');&#10;      document.body.style.overflow = searchPopupMobile.classList.contains('active') ? 'hidden' : '';&#10;    });&#10;&#10;    // Close popup when clicking the close button inside search-popup-mobile&#10;    const closeButtons = searchPopupMobile.querySelectorAll('.popup-close');&#10;    closeButtons.forEach(button =&gt; {&#10;      button.addEventListener('click', function(e) {&#10;        e.preventDefault();&#10;        searchPopupMobile.classList.remove('active');&#10;        document.body.style.overflow = '';&#10;      });&#10;    });&#10;&#10;    // Close popup when clicking on the overlay (outside of popup content)&#10;    searchPopupMobile.addEventListener('click', function(e) {&#10;      if (e.target === this) {&#10;        searchPopupMobile.classList.remove('active');&#10;        document.body.style.overflow = '';&#10;      }&#10;    });&#10;  }&#10;&#10;  // Fade effect for scrollable containers&#10;  const scrollableContainers = document.querySelectorAll('.overflow-y-auto');&#10;  scrollableContainers.forEach(container =&gt; {&#10;    const fadeElement = container.querySelector('#scroll-fade');&#10;&#10;    if (fadeElement) {&#10;      // Check on page load&#10;      checkScrollPosition(container, fadeElement);&#10;&#10;      // Check on scroll&#10;      container.addEventListener('scroll', function() {&#10;        checkScrollPosition(container, fadeElement);&#10;      });&#10;&#10;      // Check on window resize&#10;      window.addEventListener('resize', function() {&#10;        checkScrollPosition(container, fadeElement);&#10;      });&#10;    }&#10;  });&#10;&#10;  function checkScrollPosition(container, fadeElement) {&#10;    // Check if user has scrolled to the bottom&#10;    const isAtBottom = container.scrollHeight - container.scrollTop &lt;= container.clientHeight + 5; // 5px tolerance&#10;&#10;    // Toggle fade visibility&#10;    if (isAtBottom) {&#10;      fadeElement.style.opacity = '0';&#10;    } else {&#10;      fadeElement.style.opacity = '1';&#10;    }&#10;  }&#10;});&#10;" />
              <option name="updatedContent" value="// Popup functionality&#10;document.addEventListener('DOMContentLoaded', function() {&#10;  // Initialize popup functionality&#10;  initPopup();&#10;&#10;  // Initialize toast functionality for Apply Now buttons&#10;  initToastForApplyButtons();&#10;  &#10;  // Initialize mobile popups&#10;  initMobilePopups();&#10;});&#10;&#10;function initPopup() {&#10;  // Find ALL popup-button elements that will trigger the popup&#10;  const popupButtons = document.querySelectorAll('.popup-button');&#10;&#10;  if (popupButtons.length &gt; 0) {&#10;    // Add click event listener to ALL popup buttons&#10;    popupButtons.forEach(button =&gt; {&#10;      button.addEventListener('click', function(e) {&#10;        e.preventDefault(); // Prevent default link behavior&#10;        openPopup('filter-popup');&#10;      });&#10;    });&#10;  }&#10;&#10;  // Close popup when clicking the close button or overlay&#10;  const closeButtons = document.querySelectorAll('.popup-close, .popup-overlay');&#10;  closeButtons.forEach(button =&gt; {&#10;    button.addEventListener('click', function(e) {&#10;      // Only close if clicking the overlay itself or the close button&#10;      if (e.target === this || e.target.closest('.popup-close')) {&#10;        const popupId = e.target.closest('.popup-overlay').id;&#10;        closePopup(popupId);&#10;      }&#10;    });&#10;  });&#10;&#10;  // Handle the Apply button click in the popup&#10;  const applyButton = document.querySelector('.apply-now-button');&#10;  if (applyButton) {&#10;    applyButton.addEventListener('click', function(e) {&#10;      e.preventDefault(); // Prevent default form submission&#10;&#10;      // Close the popup&#10;      const popupId = e.target.closest('.popup-overlay').id;&#10;      closePopup(popupId);&#10;&#10;      // Show toast notification&#10;      showToast();&#10;&#10;      // Scroll to top of the page&#10;      window.scrollTo({&#10;        top: 0,&#10;        behavior: 'smooth'&#10;      });&#10;    });&#10;  }&#10;}&#10;&#10;function initToastForApplyButtons() {&#10;  // Get all Apply Now buttons&#10;  const applyButtons = document.querySelectorAll('.apply-now-button');&#10;  const toastBlock = document.querySelector('.toast-block');&#10;&#10;  if (applyButtons.length &gt; 0 &amp;&amp; toastBlock) {&#10;    applyButtons.forEach(button =&gt; {&#10;      button.addEventListener('click', function(e) {&#10;        e.preventDefault(); // Prevent default link behavior&#10;        showToast(toastBlock);&#10;      });&#10;    });&#10;&#10;    // Add event listener to close toast when clicking the close button&#10;    const toastCloseButton = toastBlock.querySelector('button');&#10;    if (toastCloseButton) {&#10;      toastCloseButton.addEventListener('click', function() {&#10;        hideToast(toastBlock);&#10;      });&#10;    }&#10;&#10;    // Auto-hide the toast after 5 seconds&#10;    let toastTimeout;&#10;    function showToast(toast) {&#10;      // First clear any existing timeout&#10;      if (toastTimeout) {&#10;        clearTimeout(toastTimeout);&#10;      }&#10;&#10;      // Position the toast at the bottom of the viewport&#10;      toast.style.display = 'block';&#10;      toast.style.opacity = '0';&#10;      toast.style.transition = 'all 0.3s ease';&#10;&#10;      // Trigger reflow&#10;      void toast.offsetWidth;&#10;&#10;      // Show toast with animation&#10;      toast.style.opacity = '1';&#10;&#10;      // Set timeout to hide the toast&#10;      toastTimeout = setTimeout(() =&gt; {&#10;        hideToast(toast);&#10;      }, 5000);&#10;&#10;      // Start progress bar animation&#10;      const progressBar = toast.querySelector('em');&#10;      if (progressBar) {&#10;        progressBar.style.transition = 'width 5s linear';&#10;        progressBar.style.width = '0';&#10;      }&#10;    }&#10;&#10;    function hideToast(toast) {&#10;      toast.style.opacity = '0';&#10;&#10;      // Reset progress bar&#10;      const progressBar = toast.querySelector('em');&#10;      if (progressBar) {&#10;        progressBar.style.transition = 'none';&#10;        progressBar.style.width = '50%';&#10;      }&#10;    }&#10;  }&#10;}&#10;&#10;function openPopup(popupId) {&#10;  const popup = document.getElementById(popupId);&#10;  if (popup) {&#10;    popup.classList.add('active');&#10;    document.body.style.overflow = 'hidden'; // Prevent scrolling&#10;  }&#10;}&#10;&#10;function closePopup(popupId) {&#10;  const popup = document.getElementById(popupId);&#10;  if (popup) {&#10;    popup.classList.remove('active');&#10;    document.body.style.overflow = ''; // Restore scrolling&#10;  }&#10;}&#10;&#10;// Global variable to store timeout ID&#10;let toastTimeout;&#10;&#10;function showToast() {&#10;  const toast = document.querySelector('.toast-block');&#10;  if (!toast) return;&#10;&#10;  // First clear any existing timeout&#10;  if (toastTimeout) {&#10;    clearTimeout(toastTimeout);&#10;  }&#10;&#10;  // Make the toast visible&#10;  toast.classList.remove('hidden');&#10;  toast.style.display = 'block';&#10;  toast.style.opacity = '1';&#10;&#10;  // Reset and start the progress bar animation&#10;  const progressBar = toast.querySelector('em');&#10;  if (progressBar) {&#10;    progressBar.style.transition = 'none';&#10;    progressBar.style.width = '100%';&#10;&#10;    // Force reflow to make sure the transition starts from the beginning&#10;    void progressBar.offsetWidth;&#10;&#10;    progressBar.style.transition = 'width 5s linear';&#10;    progressBar.style.width = '0';&#10;  }&#10;&#10;  // Auto-hide the toast after 5 seconds&#10;  toastTimeout = setTimeout(() =&gt; {&#10;    hideToast();&#10;  }, 5000);&#10;}&#10;&#10;function hideToast() {&#10;  const toast = document.querySelector('.toast-block');&#10;  if (!toast) return;&#10;&#10;  toast.style.opacity = '0';&#10;&#10;  // Hide the toast after the transition&#10;  setTimeout(() =&gt; {&#10;    toast.style.display = 'none';&#10;    toast.classList.add('hidden');&#10;&#10;    // Reset progress bar&#10;    const progressBar = toast.querySelector('em');&#10;    if (progressBar) {&#10;      progressBar.style.transition = 'none';&#10;      progressBar.style.width = '100%';&#10;    }&#10;  }, 300);&#10;}&#10;&#10;// Function to initialize all mobile popups&#10;function initMobilePopups() {&#10;  initMobilePopup('filter-mobile-btn', 'filter-popup-mobile');&#10;  initMobilePopup('sort-mobile-btn', 'sort-popup-mobile');&#10;  initMobilePopup('search-mobile-btn', 'search-popup-mobile');&#10;  &#10;  // Initialize scroll fade effect for all mobile popups&#10;  initScrollFadeEffect();&#10;}&#10;&#10;// Enhanced function to initialize mobile popups with better touch handling&#10;function initMobilePopup(buttonId, popupId) {&#10;  const button = document.getElementById(buttonId);&#10;  const popup = document.getElementById(popupId);&#10;  &#10;  if (!button || !popup) return;&#10;  &#10;  // Add touchstart and click events for better mobile responsiveness&#10;  button.addEventListener('click', function(e) {&#10;    e.preventDefault();&#10;    e.stopPropagation(); // Prevent event bubbling&#10;    togglePopup(popup);&#10;  });&#10;  &#10;  // Use touchstart for faster response on mobile&#10;  button.addEventListener('touchstart', function(e) {&#10;    e.preventDefault();&#10;    togglePopup(popup);&#10;  }, { passive: false });&#10;  &#10;  // Close buttons inside the popup&#10;  const closeButtons = popup.querySelectorAll('.popup-close');&#10;  closeButtons.forEach(closeBtn =&gt; {&#10;    closeBtn.addEventListener('click', function(e) {&#10;      e.preventDefault();&#10;      e.stopPropagation();&#10;      closePopupMobile(popup);&#10;    });&#10;    &#10;    closeBtn.addEventListener('touchstart', function(e) {&#10;      e.preventDefault();&#10;      closePopupMobile(popup);&#10;    }, { passive: false });&#10;  });&#10;  &#10;  // Close when clicking outside popup content&#10;  popup.addEventListener('click', function(e) {&#10;    if (e.target === popup) {&#10;      closePopupMobile(popup);&#10;    }&#10;  });&#10;  &#10;  // Handle apply buttons inside mobile popups&#10;  const applyButtons = popup.querySelectorAll('.apply-now-button');&#10;  applyButtons.forEach(applyBtn =&gt; {&#10;    applyBtn.addEventListener('click', function(e) {&#10;      e.preventDefault();&#10;      closePopupMobile(popup);&#10;      // Show toast notification if needed&#10;      showToast();&#10;    });&#10;  });&#10;}&#10;&#10;// Toggle mobile popup visibility&#10;function togglePopup(popup) {&#10;  if (popup.classList.contains('active')) {&#10;    closePopupMobile(popup);&#10;  } else {&#10;    openPopupMobile(popup);&#10;  }&#10;}&#10;&#10;// Open mobile popup with enhanced animation&#10;function openPopupMobile(popup) {&#10;  // Close any other open popups first&#10;  document.querySelectorAll('.popup-overlay.active').forEach(openPopup =&gt; {&#10;    if (openPopup !== popup) {&#10;      closePopupMobile(openPopup);&#10;    }&#10;  });&#10;  &#10;  // Add active class to show the popup&#10;  popup.classList.add('active');&#10;  &#10;  // Prevent background scrolling&#10;  document.body.style.overflow = 'hidden';&#10;  &#10;  // Force browser reflow to ensure animations work properly&#10;  void popup.offsetWidth;&#10;}&#10;&#10;// Close mobile popup with enhanced animation&#10;function closePopupMobile(popup) {&#10;  popup.classList.remove('active');&#10;  document.body.style.overflow = '';&#10;}&#10;&#10;// Initialize scroll fade effect for scrollable containers&#10;function initScrollFadeEffect() {&#10;  const scrollableContainers = document.querySelectorAll('.overflow-y-auto');&#10;  &#10;  scrollableContainers.forEach(container =&gt; {&#10;    // Check if a fade element exists, if not create one&#10;    let fadeElement = container.querySelector('#scroll-fade');&#10;    &#10;    if (!fadeElement) {&#10;      fadeElement = document.createElement('div');&#10;      fadeElement.id = 'scroll-fade';&#10;      container.appendChild(fadeElement);&#10;    }&#10;    &#10;    // Initial check&#10;    checkScrollPosition(container, fadeElement);&#10;    &#10;    // Check on scroll&#10;    container.addEventListener('scroll', function() {&#10;      checkScrollPosition(container, fadeElement);&#10;    });&#10;    &#10;    // Check on window resize&#10;    window.addEventListener('resize', function() {&#10;      checkScrollPosition(container, fadeElement);&#10;    });&#10;  });&#10;}&#10;&#10;function checkScrollPosition(container, fadeElement) {&#10;  // Check if user has scrolled to the bottom&#10;  const isAtBottom = container.scrollHeight - container.scrollTop &lt;= container.clientHeight + 5; // 5px tolerance&#10;  &#10;  // Toggle fade visibility&#10;  if (isAtBottom) {&#10;    fadeElement.style.opacity = '0';&#10;  } else {&#10;    fadeElement.style.opacity = '1';&#10;  }&#10;  &#10;  // Position the fade element at the bottom of the container&#10;  fadeElement.style.bottom = '0';&#10;  fadeElement.style.position = 'absolute';&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>